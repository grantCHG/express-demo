//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
GetArgs = module.exports.GetArgs = function(args) {
  this.bucket = null;
  this.key = null;
  this.last = null;
  if (args) {
    if (args.bucket !== undefined && args.bucket !== null) {
      this.bucket = args.bucket;
    }
    if (args.key !== undefined && args.key !== null) {
      this.key = args.key;
    }
    if (args.last !== undefined && args.last !== null) {
      this.last = args.last;
    }
  }
};
GetArgs.prototype = {};
GetArgs.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.bucket = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.last = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetArgs.prototype.write = function(output) {
  output.writeStructBegin('GetArgs');
  if (this.bucket !== null && this.bucket !== undefined) {
    output.writeFieldBegin('bucket', Thrift.Type.I32, 1);
    output.writeI32(this.bucket);
    output.writeFieldEnd();
  }
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 2);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.last !== null && this.last !== undefined) {
    output.writeFieldBegin('last', Thrift.Type.BOOL, 3);
    output.writeBool(this.last);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GetResult = module.exports.GetResult = function(args) {
  this.bucket = null;
  this.key = null;
  this.value = null;
  this.isTimeout = null;
  this.ret = null;
  this.errMsg = null;
  if (args) {
    if (args.bucket !== undefined && args.bucket !== null) {
      this.bucket = args.bucket;
    }
    if (args.key !== undefined && args.key !== null) {
      this.key = args.key;
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
    if (args.isTimeout !== undefined && args.isTimeout !== null) {
      this.isTimeout = args.isTimeout;
    }
    if (args.ret !== undefined && args.ret !== null) {
      this.ret = args.ret;
    }
    if (args.errMsg !== undefined && args.errMsg !== null) {
      this.errMsg = args.errMsg;
    }
  }
};
GetResult.prototype = {};
GetResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.bucket = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.isTimeout = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.ret = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.errMsg = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetResult.prototype.write = function(output) {
  output.writeStructBegin('GetResult');
  if (this.bucket !== null && this.bucket !== undefined) {
    output.writeFieldBegin('bucket', Thrift.Type.I32, 1);
    output.writeI32(this.bucket);
    output.writeFieldEnd();
  }
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 2);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 3);
    output.writeBinary(this.value);
    output.writeFieldEnd();
  }
  if (this.isTimeout !== null && this.isTimeout !== undefined) {
    output.writeFieldBegin('isTimeout', Thrift.Type.BOOL, 4);
    output.writeBool(this.isTimeout);
    output.writeFieldEnd();
  }
  if (this.ret !== null && this.ret !== undefined) {
    output.writeFieldBegin('ret', Thrift.Type.I32, 5);
    output.writeI32(this.ret);
    output.writeFieldEnd();
  }
  if (this.errMsg !== null && this.errMsg !== undefined) {
    output.writeFieldBegin('errMsg', Thrift.Type.STRING, 6);
    output.writeString(this.errMsg);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SetResult = module.exports.SetResult = function(args) {
  this.ret = null;
  this.errMsg = null;
  if (args) {
    if (args.ret !== undefined && args.ret !== null) {
      this.ret = args.ret;
    }
    if (args.errMsg !== undefined && args.errMsg !== null) {
      this.errMsg = args.errMsg;
    }
  }
};
SetResult.prototype = {};
SetResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.ret = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.errMsg = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SetResult.prototype.write = function(output) {
  output.writeStructBegin('SetResult');
  if (this.ret !== null && this.ret !== undefined) {
    output.writeFieldBegin('ret', Thrift.Type.I32, 1);
    output.writeI32(this.ret);
    output.writeFieldEnd();
  }
  if (this.errMsg !== null && this.errMsg !== undefined) {
    output.writeFieldBegin('errMsg', Thrift.Type.STRING, 2);
    output.writeString(this.errMsg);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Result = module.exports.Result = function(args) {
  this.ret = null;
  this.errMsg = null;
  if (args) {
    if (args.ret !== undefined && args.ret !== null) {
      this.ret = args.ret;
    }
    if (args.errMsg !== undefined && args.errMsg !== null) {
      this.errMsg = args.errMsg;
    }
  }
};
Result.prototype = {};
Result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.ret = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.errMsg = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Result.prototype.write = function(output) {
  output.writeStructBegin('Result');
  if (this.ret !== null && this.ret !== undefined) {
    output.writeFieldBegin('ret', Thrift.Type.I32, 1);
    output.writeI32(this.ret);
    output.writeFieldEnd();
  }
  if (this.errMsg !== null && this.errMsg !== undefined) {
    output.writeFieldBegin('errMsg', Thrift.Type.STRING, 2);
    output.writeString(this.errMsg);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SetArgs = module.exports.SetArgs = function(args) {
  this.bucket = null;
  this.key = null;
  this.value = null;
  this.expire = null;
  if (args) {
    if (args.bucket !== undefined && args.bucket !== null) {
      this.bucket = args.bucket;
    }
    if (args.key !== undefined && args.key !== null) {
      this.key = args.key;
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
    if (args.expire !== undefined && args.expire !== null) {
      this.expire = args.expire;
    }
  }
};
SetArgs.prototype = {};
SetArgs.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.bucket = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.expire = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SetArgs.prototype.write = function(output) {
  output.writeStructBegin('SetArgs');
  if (this.bucket !== null && this.bucket !== undefined) {
    output.writeFieldBegin('bucket', Thrift.Type.I32, 1);
    output.writeI32(this.bucket);
    output.writeFieldEnd();
  }
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 2);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 3);
    output.writeBinary(this.value);
    output.writeFieldEnd();
  }
  if (this.expire !== null && this.expire !== undefined) {
    output.writeFieldBegin('expire', Thrift.Type.I32, 4);
    output.writeI32(this.expire);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BatchGetArgs = module.exports.BatchGetArgs = function(args) {
  this.bucket = null;
  this.keys = null;
  this.expire = null;
  if (args) {
    if (args.bucket !== undefined && args.bucket !== null) {
      this.bucket = args.bucket;
    }
    if (args.keys !== undefined && args.keys !== null) {
      this.keys = Thrift.copyList(args.keys, [null]);
    }
    if (args.expire !== undefined && args.expire !== null) {
      this.expire = args.expire;
    }
  }
};
BatchGetArgs.prototype = {};
BatchGetArgs.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.bucket = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.keys = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readString();
          this.keys.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.expire = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BatchGetArgs.prototype.write = function(output) {
  output.writeStructBegin('BatchGetArgs');
  if (this.bucket !== null && this.bucket !== undefined) {
    output.writeFieldBegin('bucket', Thrift.Type.I32, 1);
    output.writeI32(this.bucket);
    output.writeFieldEnd();
  }
  if (this.keys !== null && this.keys !== undefined) {
    output.writeFieldBegin('keys', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.keys.length);
    for (var iter7 in this.keys)
    {
      if (this.keys.hasOwnProperty(iter7))
      {
        iter7 = this.keys[iter7];
        output.writeString(iter7);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.expire !== null && this.expire !== undefined) {
    output.writeFieldBegin('expire', Thrift.Type.I32, 3);
    output.writeI32(this.expire);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BatchGetResult = module.exports.BatchGetResult = function(args) {
  this.bucket = null;
  this.getResultMap = null;
  this.ret = null;
  this.errMsg = null;
  if (args) {
    if (args.bucket !== undefined && args.bucket !== null) {
      this.bucket = args.bucket;
    }
    if (args.getResultMap !== undefined && args.getResultMap !== null) {
      this.getResultMap = Thrift.copyMap(args.getResultMap, [ttypes.GetResult]);
    }
    if (args.ret !== undefined && args.ret !== null) {
      this.ret = args.ret;
    }
    if (args.errMsg !== undefined && args.errMsg !== null) {
      this.errMsg = args.errMsg;
    }
  }
};
BatchGetResult.prototype = {};
BatchGetResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.bucket = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size8 = 0;
        var _rtmp312;
        this.getResultMap = {};
        var _ktype9 = 0;
        var _vtype10 = 0;
        _rtmp312 = input.readMapBegin();
        _ktype9 = _rtmp312.ktype;
        _vtype10 = _rtmp312.vtype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var key14 = null;
          var val15 = null;
          key14 = input.readString();
          val15 = new ttypes.GetResult();
          val15.read(input);
          this.getResultMap[key14] = val15;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.ret = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.errMsg = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BatchGetResult.prototype.write = function(output) {
  output.writeStructBegin('BatchGetResult');
  if (this.bucket !== null && this.bucket !== undefined) {
    output.writeFieldBegin('bucket', Thrift.Type.I32, 1);
    output.writeI32(this.bucket);
    output.writeFieldEnd();
  }
  if (this.getResultMap !== null && this.getResultMap !== undefined) {
    output.writeFieldBegin('getResultMap', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.getResultMap));
    for (var kiter16 in this.getResultMap)
    {
      if (this.getResultMap.hasOwnProperty(kiter16))
      {
        var viter17 = this.getResultMap[kiter16];
        output.writeString(kiter16);
        viter17.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.ret !== null && this.ret !== undefined) {
    output.writeFieldBegin('ret', Thrift.Type.I32, 3);
    output.writeI32(this.ret);
    output.writeFieldEnd();
  }
  if (this.errMsg !== null && this.errMsg !== undefined) {
    output.writeFieldBegin('errMsg', Thrift.Type.STRING, 4);
    output.writeString(this.errMsg);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TgetArgs = module.exports.TgetArgs = function(args) {
  this.bucket = null;
  this.key = null;
  this.cols = null;
  if (args) {
    if (args.bucket !== undefined && args.bucket !== null) {
      this.bucket = args.bucket;
    }
    if (args.key !== undefined && args.key !== null) {
      this.key = args.key;
    }
    if (args.cols !== undefined && args.cols !== null) {
      this.cols = Thrift.copyList(args.cols, [null]);
    }
  }
};
TgetArgs.prototype = {};
TgetArgs.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.bucket = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size18 = 0;
        var _rtmp322;
        this.cols = [];
        var _etype21 = 0;
        _rtmp322 = input.readListBegin();
        _etype21 = _rtmp322.etype;
        _size18 = _rtmp322.size;
        for (var _i23 = 0; _i23 < _size18; ++_i23)
        {
          var elem24 = null;
          elem24 = input.readString();
          this.cols.push(elem24);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TgetArgs.prototype.write = function(output) {
  output.writeStructBegin('TgetArgs');
  if (this.bucket !== null && this.bucket !== undefined) {
    output.writeFieldBegin('bucket', Thrift.Type.I32, 1);
    output.writeI32(this.bucket);
    output.writeFieldEnd();
  }
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 2);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.cols !== null && this.cols !== undefined) {
    output.writeFieldBegin('cols', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.cols.length);
    for (var iter25 in this.cols)
    {
      if (this.cols.hasOwnProperty(iter25))
      {
        iter25 = this.cols[iter25];
        output.writeString(iter25);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TgetResult = module.exports.TgetResult = function(args) {
  this.bucket = null;
  this.key = null;
  this.colValMap = null;
  this.ret = null;
  this.errMsg = null;
  if (args) {
    if (args.bucket !== undefined && args.bucket !== null) {
      this.bucket = args.bucket;
    }
    if (args.key !== undefined && args.key !== null) {
      this.key = args.key;
    }
    if (args.colValMap !== undefined && args.colValMap !== null) {
      this.colValMap = Thrift.copyMap(args.colValMap, [null]);
    }
    if (args.ret !== undefined && args.ret !== null) {
      this.ret = args.ret;
    }
    if (args.errMsg !== undefined && args.errMsg !== null) {
      this.errMsg = args.errMsg;
    }
  }
};
TgetResult.prototype = {};
TgetResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.bucket = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size26 = 0;
        var _rtmp330;
        this.colValMap = {};
        var _ktype27 = 0;
        var _vtype28 = 0;
        _rtmp330 = input.readMapBegin();
        _ktype27 = _rtmp330.ktype;
        _vtype28 = _rtmp330.vtype;
        _size26 = _rtmp330.size;
        for (var _i31 = 0; _i31 < _size26; ++_i31)
        {
          var key32 = null;
          var val33 = null;
          key32 = input.readString();
          val33 = input.readString();
          this.colValMap[key32] = val33;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.ret = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.errMsg = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TgetResult.prototype.write = function(output) {
  output.writeStructBegin('TgetResult');
  if (this.bucket !== null && this.bucket !== undefined) {
    output.writeFieldBegin('bucket', Thrift.Type.I32, 1);
    output.writeI32(this.bucket);
    output.writeFieldEnd();
  }
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 2);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.colValMap !== null && this.colValMap !== undefined) {
    output.writeFieldBegin('colValMap', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.colValMap));
    for (var kiter34 in this.colValMap)
    {
      if (this.colValMap.hasOwnProperty(kiter34))
      {
        var viter35 = this.colValMap[kiter34];
        output.writeString(kiter34);
        output.writeString(viter35);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.ret !== null && this.ret !== undefined) {
    output.writeFieldBegin('ret', Thrift.Type.I32, 5);
    output.writeI32(this.ret);
    output.writeFieldEnd();
  }
  if (this.errMsg !== null && this.errMsg !== undefined) {
    output.writeFieldBegin('errMsg', Thrift.Type.STRING, 6);
    output.writeString(this.errMsg);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TsetArgs = module.exports.TsetArgs = function(args) {
  this.bucket = null;
  this.key = null;
  this.colValMap = null;
  if (args) {
    if (args.bucket !== undefined && args.bucket !== null) {
      this.bucket = args.bucket;
    }
    if (args.key !== undefined && args.key !== null) {
      this.key = args.key;
    }
    if (args.colValMap !== undefined && args.colValMap !== null) {
      this.colValMap = Thrift.copyMap(args.colValMap, [null]);
    }
  }
};
TsetArgs.prototype = {};
TsetArgs.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.bucket = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size36 = 0;
        var _rtmp340;
        this.colValMap = {};
        var _ktype37 = 0;
        var _vtype38 = 0;
        _rtmp340 = input.readMapBegin();
        _ktype37 = _rtmp340.ktype;
        _vtype38 = _rtmp340.vtype;
        _size36 = _rtmp340.size;
        for (var _i41 = 0; _i41 < _size36; ++_i41)
        {
          var key42 = null;
          var val43 = null;
          key42 = input.readString();
          val43 = input.readString();
          this.colValMap[key42] = val43;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TsetArgs.prototype.write = function(output) {
  output.writeStructBegin('TsetArgs');
  if (this.bucket !== null && this.bucket !== undefined) {
    output.writeFieldBegin('bucket', Thrift.Type.I32, 1);
    output.writeI32(this.bucket);
    output.writeFieldEnd();
  }
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 2);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.colValMap !== null && this.colValMap !== undefined) {
    output.writeFieldBegin('colValMap', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.colValMap));
    for (var kiter44 in this.colValMap)
    {
      if (this.colValMap.hasOwnProperty(kiter44))
      {
        var viter45 = this.colValMap[kiter44];
        output.writeString(kiter44);
        output.writeString(viter45);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TqueryResult = module.exports.TqueryResult = function(args) {
  this.bucket = null;
  this.total = null;
  this.retData = null;
  this.ret = null;
  this.errMsg = null;
  if (args) {
    if (args.bucket !== undefined && args.bucket !== null) {
      this.bucket = args.bucket;
    }
    if (args.total !== undefined && args.total !== null) {
      this.total = args.total;
    }
    if (args.retData !== undefined && args.retData !== null) {
      this.retData = Thrift.copyList(args.retData, [Thrift.copyMap, null]);
    }
    if (args.ret !== undefined && args.ret !== null) {
      this.ret = args.ret;
    }
    if (args.errMsg !== undefined && args.errMsg !== null) {
      this.errMsg = args.errMsg;
    }
  }
};
TqueryResult.prototype = {};
TqueryResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.bucket = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.total = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size46 = 0;
        var _rtmp350;
        this.retData = [];
        var _etype49 = 0;
        _rtmp350 = input.readListBegin();
        _etype49 = _rtmp350.etype;
        _size46 = _rtmp350.size;
        for (var _i51 = 0; _i51 < _size46; ++_i51)
        {
          var elem52 = null;
          var _size53 = 0;
          var _rtmp357;
          elem52 = {};
          var _ktype54 = 0;
          var _vtype55 = 0;
          _rtmp357 = input.readMapBegin();
          _ktype54 = _rtmp357.ktype;
          _vtype55 = _rtmp357.vtype;
          _size53 = _rtmp357.size;
          for (var _i58 = 0; _i58 < _size53; ++_i58)
          {
            var key59 = null;
            var val60 = null;
            key59 = input.readString();
            val60 = input.readString();
            elem52[key59] = val60;
          }
          input.readMapEnd();
          this.retData.push(elem52);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.ret = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.errMsg = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TqueryResult.prototype.write = function(output) {
  output.writeStructBegin('TqueryResult');
  if (this.bucket !== null && this.bucket !== undefined) {
    output.writeFieldBegin('bucket', Thrift.Type.I32, 1);
    output.writeI32(this.bucket);
    output.writeFieldEnd();
  }
  if (this.total !== null && this.total !== undefined) {
    output.writeFieldBegin('total', Thrift.Type.I32, 2);
    output.writeI32(this.total);
    output.writeFieldEnd();
  }
  if (this.retData !== null && this.retData !== undefined) {
    output.writeFieldBegin('retData', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.MAP, this.retData.length);
    for (var iter61 in this.retData)
    {
      if (this.retData.hasOwnProperty(iter61))
      {
        iter61 = this.retData[iter61];
        output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(iter61));
        for (var kiter62 in iter61)
        {
          if (iter61.hasOwnProperty(kiter62))
          {
            var viter63 = iter61[kiter62];
            output.writeString(kiter62);
            output.writeString(viter63);
          }
        }
        output.writeMapEnd();
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ret !== null && this.ret !== undefined) {
    output.writeFieldBegin('ret', Thrift.Type.I32, 5);
    output.writeI32(this.ret);
    output.writeFieldEnd();
  }
  if (this.errMsg !== null && this.errMsg !== undefined) {
    output.writeFieldBegin('errMsg', Thrift.Type.STRING, 6);
    output.writeString(this.errMsg);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TBatchGetResult = module.exports.TBatchGetResult = function(args) {
  this.bucket = null;
  this.getResultMap = null;
  this.ret = null;
  this.errMsg = null;
  if (args) {
    if (args.bucket !== undefined && args.bucket !== null) {
      this.bucket = args.bucket;
    }
    if (args.getResultMap !== undefined && args.getResultMap !== null) {
      this.getResultMap = Thrift.copyMap(args.getResultMap, [Thrift.copyMap, null]);
    }
    if (args.ret !== undefined && args.ret !== null) {
      this.ret = args.ret;
    }
    if (args.errMsg !== undefined && args.errMsg !== null) {
      this.errMsg = args.errMsg;
    }
  }
};
TBatchGetResult.prototype = {};
TBatchGetResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.bucket = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size64 = 0;
        var _rtmp368;
        this.getResultMap = {};
        var _ktype65 = 0;
        var _vtype66 = 0;
        _rtmp368 = input.readMapBegin();
        _ktype65 = _rtmp368.ktype;
        _vtype66 = _rtmp368.vtype;
        _size64 = _rtmp368.size;
        for (var _i69 = 0; _i69 < _size64; ++_i69)
        {
          var key70 = null;
          var val71 = null;
          key70 = input.readString();
          var _size72 = 0;
          var _rtmp376;
          val71 = {};
          var _ktype73 = 0;
          var _vtype74 = 0;
          _rtmp376 = input.readMapBegin();
          _ktype73 = _rtmp376.ktype;
          _vtype74 = _rtmp376.vtype;
          _size72 = _rtmp376.size;
          for (var _i77 = 0; _i77 < _size72; ++_i77)
          {
            var key78 = null;
            var val79 = null;
            key78 = input.readString();
            val79 = input.readString();
            val71[key78] = val79;
          }
          input.readMapEnd();
          this.getResultMap[key70] = val71;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.ret = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.errMsg = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TBatchGetResult.prototype.write = function(output) {
  output.writeStructBegin('TBatchGetResult');
  if (this.bucket !== null && this.bucket !== undefined) {
    output.writeFieldBegin('bucket', Thrift.Type.I32, 1);
    output.writeI32(this.bucket);
    output.writeFieldEnd();
  }
  if (this.getResultMap !== null && this.getResultMap !== undefined) {
    output.writeFieldBegin('getResultMap', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.MAP, Thrift.objectLength(this.getResultMap));
    for (var kiter80 in this.getResultMap)
    {
      if (this.getResultMap.hasOwnProperty(kiter80))
      {
        var viter81 = this.getResultMap[kiter80];
        output.writeString(kiter80);
        output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(viter81));
        for (var kiter82 in viter81)
        {
          if (viter81.hasOwnProperty(kiter82))
          {
            var viter83 = viter81[kiter82];
            output.writeString(kiter82);
            output.writeString(viter83);
          }
        }
        output.writeMapEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.ret !== null && this.ret !== undefined) {
    output.writeFieldBegin('ret', Thrift.Type.I32, 3);
    output.writeI32(this.ret);
    output.writeFieldEnd();
  }
  if (this.errMsg !== null && this.errMsg !== undefined) {
    output.writeFieldBegin('errMsg', Thrift.Type.STRING, 4);
    output.writeString(this.errMsg);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TBatchGetArgs = module.exports.TBatchGetArgs = function(args) {
  this.bucket = null;
  this.keys = null;
  this.retFields = null;
  this.expire = null;
  if (args) {
    if (args.bucket !== undefined && args.bucket !== null) {
      this.bucket = args.bucket;
    }
    if (args.keys !== undefined && args.keys !== null) {
      this.keys = Thrift.copyList(args.keys, [null]);
    }
    if (args.retFields !== undefined && args.retFields !== null) {
      this.retFields = Thrift.copyList(args.retFields, [null]);
    }
    if (args.expire !== undefined && args.expire !== null) {
      this.expire = args.expire;
    }
  }
};
TBatchGetArgs.prototype = {};
TBatchGetArgs.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.bucket = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size84 = 0;
        var _rtmp388;
        this.keys = [];
        var _etype87 = 0;
        _rtmp388 = input.readListBegin();
        _etype87 = _rtmp388.etype;
        _size84 = _rtmp388.size;
        for (var _i89 = 0; _i89 < _size84; ++_i89)
        {
          var elem90 = null;
          elem90 = input.readString();
          this.keys.push(elem90);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size91 = 0;
        var _rtmp395;
        this.retFields = [];
        var _etype94 = 0;
        _rtmp395 = input.readListBegin();
        _etype94 = _rtmp395.etype;
        _size91 = _rtmp395.size;
        for (var _i96 = 0; _i96 < _size91; ++_i96)
        {
          var elem97 = null;
          elem97 = input.readString();
          this.retFields.push(elem97);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.expire = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TBatchGetArgs.prototype.write = function(output) {
  output.writeStructBegin('TBatchGetArgs');
  if (this.bucket !== null && this.bucket !== undefined) {
    output.writeFieldBegin('bucket', Thrift.Type.I32, 1);
    output.writeI32(this.bucket);
    output.writeFieldEnd();
  }
  if (this.keys !== null && this.keys !== undefined) {
    output.writeFieldBegin('keys', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.keys.length);
    for (var iter98 in this.keys)
    {
      if (this.keys.hasOwnProperty(iter98))
      {
        iter98 = this.keys[iter98];
        output.writeString(iter98);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.retFields !== null && this.retFields !== undefined) {
    output.writeFieldBegin('retFields', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.retFields.length);
    for (var iter99 in this.retFields)
    {
      if (this.retFields.hasOwnProperty(iter99))
      {
        iter99 = this.retFields[iter99];
        output.writeString(iter99);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.expire !== null && this.expire !== undefined) {
    output.writeFieldBegin('expire', Thrift.Type.I32, 4);
    output.writeI32(this.expire);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DelArgs = module.exports.DelArgs = function(args) {
  this.bucket = null;
  this.key = null;
  if (args) {
    if (args.bucket !== undefined && args.bucket !== null) {
      this.bucket = args.bucket;
    }
    if (args.key !== undefined && args.key !== null) {
      this.key = args.key;
    }
  }
};
DelArgs.prototype = {};
DelArgs.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.bucket = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DelArgs.prototype.write = function(output) {
  output.writeStructBegin('DelArgs');
  if (this.bucket !== null && this.bucket !== undefined) {
    output.writeFieldBegin('bucket', Thrift.Type.I32, 1);
    output.writeI32(this.bucket);
    output.writeFieldEnd();
  }
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 2);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TqueryArgs = module.exports.TqueryArgs = function(args) {
  this.bucket = null;
  this.sql = null;
  this.expire = null;
  if (args) {
    if (args.bucket !== undefined && args.bucket !== null) {
      this.bucket = args.bucket;
    }
    if (args.sql !== undefined && args.sql !== null) {
      this.sql = args.sql;
    }
    if (args.expire !== undefined && args.expire !== null) {
      this.expire = args.expire;
    }
  }
};
TqueryArgs.prototype = {};
TqueryArgs.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.bucket = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.sql = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.expire = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TqueryArgs.prototype.write = function(output) {
  output.writeStructBegin('TqueryArgs');
  if (this.bucket !== null && this.bucket !== undefined) {
    output.writeFieldBegin('bucket', Thrift.Type.I32, 1);
    output.writeI32(this.bucket);
    output.writeFieldEnd();
  }
  if (this.sql !== null && this.sql !== undefined) {
    output.writeFieldBegin('sql', Thrift.Type.STRING, 2);
    output.writeString(this.sql);
    output.writeFieldEnd();
  }
  if (this.expire !== null && this.expire !== undefined) {
    output.writeFieldBegin('expire', Thrift.Type.I32, 3);
    output.writeI32(this.expire);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

